type Query {
  users: [User!]!
  user(userId: ID!): User
  currentUser: User
  quizzes(filter: String, skip: Int, first: Int): [Quiz!]!
  quizzesBySchoolClass(filter: [String!]!, search: String = "", forCurrentUser: Boolean = false): [Quiz!]!
  quiz(quizId: ID!): Quiz
  schoolSubjects: [SchoolSubject!]!
  schoolClass(schoolClassId: ID!): SchoolClass!,
  schoolClassesByCurrentUser(search: String = ""): [SchoolClass!]!
  students(studentsId: [ID!]!): [Student]
  reports(studentId: ID): [Report]
}

type Mutation {
  createQuiz(name: String!, schoolSubjectId: ID!): Quiz
  createSchoolClass(name: String!): SchoolClass
  createStudent(name: String!, schoolClassId: ID!, markerId: String!): Student
  signup(email: String!, password: String!, userName: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload,
  updateStudent(name: String!, studentId: ID!, markerId: String!): Student
  upsertStudent(name: String!, schoolClassId: ID!, markerId: String!, studentId: ID): Student
  deleteStudent(studentId: ID!): Student
  deleteSchoolClass(schoolClassId: ID!): SchoolClass
  upsertQuestion(label: String!, quizId: ID!, questionId: ID): Question
  upsertAnswer(label: String!, isRight: Boolean, questionId: ID!, answerId: ID): Answer
  updateAnswerIsRightField(answerId: ID!, isRight: Boolean): Answer
  deleteQuiz(quizId: ID!): Quiz
  createReport(schoolClassId: ID!, studentId: ID!, quizId: ID!, questionId: ID!, answerId: ID!): Report
  upsertReport(schoolClassId: ID!, studentId: ID!, quizId: ID!, questionId: ID!, answerId: ID!, reportId: ID): Report
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  email: String
  userName: String!
  password: String!
  schoolClasses: [SchoolClass!]!
  quizzes: [Quiz!]!
}

type SchoolClass {
  id: ID!
  name: String!
  teacher: User
  students: [Student!]!
}

type Student {
  id: ID!
  name: String!
  schoolClass: SchoolClass
  markerId: String!
}

type Marker {
    id: ID!
    markerId: Int
    imageLink: String
}

type SchoolSubject {
    id: ID!
    name: String!
}

type Quiz {
  id: ID!
  name: String!
  schoolSubject: SchoolSubject
  createdBy: User
  questions: [Question]
}

type Question {
  id: ID!
  label: String!
  quiz: Quiz
  answers: [Answer]
}

type Answer {
  id: ID!
  label: String!
  isRight: Boolean!
  question: Question
}

type Report {
    id: ID!
    schoolClass: SchoolClass
    student: Student
    quiz: Quiz
    question: Question
    answer: Answer
    createdAt: String!
}