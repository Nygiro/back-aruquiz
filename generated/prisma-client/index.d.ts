// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  answer: (where?: AnswerWhereInput) => Promise<boolean>;
  marker: (where?: MarkerWhereInput) => Promise<boolean>;
  question: (where?: QuestionWhereInput) => Promise<boolean>;
  quiz: (where?: QuizWhereInput) => Promise<boolean>;
  report: (where?: ReportWhereInput) => Promise<boolean>;
  schoolClass: (where?: SchoolClassWhereInput) => Promise<boolean>;
  schoolSubject: (where?: SchoolSubjectWhereInput) => Promise<boolean>;
  student: (where?: StudentWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  answer: (where: AnswerWhereUniqueInput) => AnswerNullablePromise;
  answers: (args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Answer>;
  answersConnection: (args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AnswerConnectionPromise;
  marker: (where: MarkerWhereUniqueInput) => MarkerNullablePromise;
  markers: (args?: {
    where?: MarkerWhereInput;
    orderBy?: MarkerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Marker>;
  markersConnection: (args?: {
    where?: MarkerWhereInput;
    orderBy?: MarkerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MarkerConnectionPromise;
  question: (where: QuestionWhereUniqueInput) => QuestionNullablePromise;
  questions: (args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Question>;
  questionsConnection: (args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => QuestionConnectionPromise;
  quiz: (where: QuizWhereUniqueInput) => QuizNullablePromise;
  quizzes: (args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Quiz>;
  quizzesConnection: (args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => QuizConnectionPromise;
  report: (where: ReportWhereUniqueInput) => ReportNullablePromise;
  reports: (args?: {
    where?: ReportWhereInput;
    orderBy?: ReportOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Report>;
  reportsConnection: (args?: {
    where?: ReportWhereInput;
    orderBy?: ReportOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReportConnectionPromise;
  schoolClass: (
    where: SchoolClassWhereUniqueInput
  ) => SchoolClassNullablePromise;
  schoolClasses: (args?: {
    where?: SchoolClassWhereInput;
    orderBy?: SchoolClassOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SchoolClass>;
  schoolClassesConnection: (args?: {
    where?: SchoolClassWhereInput;
    orderBy?: SchoolClassOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SchoolClassConnectionPromise;
  schoolSubject: (
    where: SchoolSubjectWhereUniqueInput
  ) => SchoolSubjectNullablePromise;
  schoolSubjects: (args?: {
    where?: SchoolSubjectWhereInput;
    orderBy?: SchoolSubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SchoolSubject>;
  schoolSubjectsConnection: (args?: {
    where?: SchoolSubjectWhereInput;
    orderBy?: SchoolSubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SchoolSubjectConnectionPromise;
  student: (where: StudentWhereUniqueInput) => StudentNullablePromise;
  students: (args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Student>;
  studentsConnection: (args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StudentConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAnswer: (data: AnswerCreateInput) => AnswerPromise;
  updateAnswer: (args: {
    data: AnswerUpdateInput;
    where: AnswerWhereUniqueInput;
  }) => AnswerPromise;
  updateManyAnswers: (args: {
    data: AnswerUpdateManyMutationInput;
    where?: AnswerWhereInput;
  }) => BatchPayloadPromise;
  upsertAnswer: (args: {
    where: AnswerWhereUniqueInput;
    create: AnswerCreateInput;
    update: AnswerUpdateInput;
  }) => AnswerPromise;
  deleteAnswer: (where: AnswerWhereUniqueInput) => AnswerPromise;
  deleteManyAnswers: (where?: AnswerWhereInput) => BatchPayloadPromise;
  createMarker: (data: MarkerCreateInput) => MarkerPromise;
  updateMarker: (args: {
    data: MarkerUpdateInput;
    where: MarkerWhereUniqueInput;
  }) => MarkerPromise;
  updateManyMarkers: (args: {
    data: MarkerUpdateManyMutationInput;
    where?: MarkerWhereInput;
  }) => BatchPayloadPromise;
  upsertMarker: (args: {
    where: MarkerWhereUniqueInput;
    create: MarkerCreateInput;
    update: MarkerUpdateInput;
  }) => MarkerPromise;
  deleteMarker: (where: MarkerWhereUniqueInput) => MarkerPromise;
  deleteManyMarkers: (where?: MarkerWhereInput) => BatchPayloadPromise;
  createQuestion: (data: QuestionCreateInput) => QuestionPromise;
  updateQuestion: (args: {
    data: QuestionUpdateInput;
    where: QuestionWhereUniqueInput;
  }) => QuestionPromise;
  updateManyQuestions: (args: {
    data: QuestionUpdateManyMutationInput;
    where?: QuestionWhereInput;
  }) => BatchPayloadPromise;
  upsertQuestion: (args: {
    where: QuestionWhereUniqueInput;
    create: QuestionCreateInput;
    update: QuestionUpdateInput;
  }) => QuestionPromise;
  deleteQuestion: (where: QuestionWhereUniqueInput) => QuestionPromise;
  deleteManyQuestions: (where?: QuestionWhereInput) => BatchPayloadPromise;
  createQuiz: (data: QuizCreateInput) => QuizPromise;
  updateQuiz: (args: {
    data: QuizUpdateInput;
    where: QuizWhereUniqueInput;
  }) => QuizPromise;
  updateManyQuizzes: (args: {
    data: QuizUpdateManyMutationInput;
    where?: QuizWhereInput;
  }) => BatchPayloadPromise;
  upsertQuiz: (args: {
    where: QuizWhereUniqueInput;
    create: QuizCreateInput;
    update: QuizUpdateInput;
  }) => QuizPromise;
  deleteQuiz: (where: QuizWhereUniqueInput) => QuizPromise;
  deleteManyQuizzes: (where?: QuizWhereInput) => BatchPayloadPromise;
  createReport: (data: ReportCreateInput) => ReportPromise;
  updateReport: (args: {
    data: ReportUpdateInput;
    where: ReportWhereUniqueInput;
  }) => ReportPromise;
  updateManyReports: (args: {
    data: ReportUpdateManyMutationInput;
    where?: ReportWhereInput;
  }) => BatchPayloadPromise;
  upsertReport: (args: {
    where: ReportWhereUniqueInput;
    create: ReportCreateInput;
    update: ReportUpdateInput;
  }) => ReportPromise;
  deleteReport: (where: ReportWhereUniqueInput) => ReportPromise;
  deleteManyReports: (where?: ReportWhereInput) => BatchPayloadPromise;
  createSchoolClass: (data: SchoolClassCreateInput) => SchoolClassPromise;
  updateSchoolClass: (args: {
    data: SchoolClassUpdateInput;
    where: SchoolClassWhereUniqueInput;
  }) => SchoolClassPromise;
  updateManySchoolClasses: (args: {
    data: SchoolClassUpdateManyMutationInput;
    where?: SchoolClassWhereInput;
  }) => BatchPayloadPromise;
  upsertSchoolClass: (args: {
    where: SchoolClassWhereUniqueInput;
    create: SchoolClassCreateInput;
    update: SchoolClassUpdateInput;
  }) => SchoolClassPromise;
  deleteSchoolClass: (where: SchoolClassWhereUniqueInput) => SchoolClassPromise;
  deleteManySchoolClasses: (
    where?: SchoolClassWhereInput
  ) => BatchPayloadPromise;
  createSchoolSubject: (data: SchoolSubjectCreateInput) => SchoolSubjectPromise;
  updateSchoolSubject: (args: {
    data: SchoolSubjectUpdateInput;
    where: SchoolSubjectWhereUniqueInput;
  }) => SchoolSubjectPromise;
  updateManySchoolSubjects: (args: {
    data: SchoolSubjectUpdateManyMutationInput;
    where?: SchoolSubjectWhereInput;
  }) => BatchPayloadPromise;
  upsertSchoolSubject: (args: {
    where: SchoolSubjectWhereUniqueInput;
    create: SchoolSubjectCreateInput;
    update: SchoolSubjectUpdateInput;
  }) => SchoolSubjectPromise;
  deleteSchoolSubject: (
    where: SchoolSubjectWhereUniqueInput
  ) => SchoolSubjectPromise;
  deleteManySchoolSubjects: (
    where?: SchoolSubjectWhereInput
  ) => BatchPayloadPromise;
  createStudent: (data: StudentCreateInput) => StudentPromise;
  updateStudent: (args: {
    data: StudentUpdateInput;
    where: StudentWhereUniqueInput;
  }) => StudentPromise;
  updateManyStudents: (args: {
    data: StudentUpdateManyMutationInput;
    where?: StudentWhereInput;
  }) => BatchPayloadPromise;
  upsertStudent: (args: {
    where: StudentWhereUniqueInput;
    create: StudentCreateInput;
    update: StudentUpdateInput;
  }) => StudentPromise;
  deleteStudent: (where: StudentWhereUniqueInput) => StudentPromise;
  deleteManyStudents: (where?: StudentWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  answer: (
    where?: AnswerSubscriptionWhereInput
  ) => AnswerSubscriptionPayloadSubscription;
  marker: (
    where?: MarkerSubscriptionWhereInput
  ) => MarkerSubscriptionPayloadSubscription;
  question: (
    where?: QuestionSubscriptionWhereInput
  ) => QuestionSubscriptionPayloadSubscription;
  quiz: (
    where?: QuizSubscriptionWhereInput
  ) => QuizSubscriptionPayloadSubscription;
  report: (
    where?: ReportSubscriptionWhereInput
  ) => ReportSubscriptionPayloadSubscription;
  schoolClass: (
    where?: SchoolClassSubscriptionWhereInput
  ) => SchoolClassSubscriptionPayloadSubscription;
  schoolSubject: (
    where?: SchoolSubjectSubscriptionWhereInput
  ) => SchoolSubjectSubscriptionPayloadSubscription;
  student: (
    where?: StudentSubscriptionWhereInput
  ) => StudentSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SchoolClassOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type StudentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "markerId_ASC"
  | "markerId_DESC";

export type QuizOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type QuestionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "label_ASC"
  | "label_DESC";

export type AnswerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "label_ASC"
  | "label_DESC"
  | "isRight_ASC"
  | "isRight_DESC";

export type MarkerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "markerId_ASC"
  | "markerId_DESC"
  | "imageLink_ASC"
  | "imageLink_DESC";

export type ReportOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "sessionId_ASC"
  | "sessionId_DESC";

export type SchoolSubjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "userName_ASC"
  | "userName_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AnswerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SchoolClassWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  teacher?: Maybe<UserWhereInput>;
  students_every?: Maybe<StudentWhereInput>;
  students_some?: Maybe<StudentWhereInput>;
  students_none?: Maybe<StudentWhereInput>;
  AND?: Maybe<SchoolClassWhereInput[] | SchoolClassWhereInput>;
  OR?: Maybe<SchoolClassWhereInput[] | SchoolClassWhereInput>;
  NOT?: Maybe<SchoolClassWhereInput[] | SchoolClassWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  userName?: Maybe<String>;
  userName_not?: Maybe<String>;
  userName_in?: Maybe<String[] | String>;
  userName_not_in?: Maybe<String[] | String>;
  userName_lt?: Maybe<String>;
  userName_lte?: Maybe<String>;
  userName_gt?: Maybe<String>;
  userName_gte?: Maybe<String>;
  userName_contains?: Maybe<String>;
  userName_not_contains?: Maybe<String>;
  userName_starts_with?: Maybe<String>;
  userName_not_starts_with?: Maybe<String>;
  userName_ends_with?: Maybe<String>;
  userName_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  schoolClasses_every?: Maybe<SchoolClassWhereInput>;
  schoolClasses_some?: Maybe<SchoolClassWhereInput>;
  schoolClasses_none?: Maybe<SchoolClassWhereInput>;
  quizzes_every?: Maybe<QuizWhereInput>;
  quizzes_some?: Maybe<QuizWhereInput>;
  quizzes_none?: Maybe<QuizWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface QuizWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  schoolSubject?: Maybe<SchoolSubjectWhereInput>;
  createdBy?: Maybe<UserWhereInput>;
  questions_every?: Maybe<QuestionWhereInput>;
  questions_some?: Maybe<QuestionWhereInput>;
  questions_none?: Maybe<QuestionWhereInput>;
  AND?: Maybe<QuizWhereInput[] | QuizWhereInput>;
  OR?: Maybe<QuizWhereInput[] | QuizWhereInput>;
  NOT?: Maybe<QuizWhereInput[] | QuizWhereInput>;
}

export interface SchoolSubjectWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<SchoolSubjectWhereInput[] | SchoolSubjectWhereInput>;
  OR?: Maybe<SchoolSubjectWhereInput[] | SchoolSubjectWhereInput>;
  NOT?: Maybe<SchoolSubjectWhereInput[] | SchoolSubjectWhereInput>;
}

export interface QuestionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  label?: Maybe<String>;
  label_not?: Maybe<String>;
  label_in?: Maybe<String[] | String>;
  label_not_in?: Maybe<String[] | String>;
  label_lt?: Maybe<String>;
  label_lte?: Maybe<String>;
  label_gt?: Maybe<String>;
  label_gte?: Maybe<String>;
  label_contains?: Maybe<String>;
  label_not_contains?: Maybe<String>;
  label_starts_with?: Maybe<String>;
  label_not_starts_with?: Maybe<String>;
  label_ends_with?: Maybe<String>;
  label_not_ends_with?: Maybe<String>;
  quiz?: Maybe<QuizWhereInput>;
  answers_every?: Maybe<AnswerWhereInput>;
  answers_some?: Maybe<AnswerWhereInput>;
  answers_none?: Maybe<AnswerWhereInput>;
  AND?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
  OR?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
  NOT?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
}

export interface AnswerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  label?: Maybe<String>;
  label_not?: Maybe<String>;
  label_in?: Maybe<String[] | String>;
  label_not_in?: Maybe<String[] | String>;
  label_lt?: Maybe<String>;
  label_lte?: Maybe<String>;
  label_gt?: Maybe<String>;
  label_gte?: Maybe<String>;
  label_contains?: Maybe<String>;
  label_not_contains?: Maybe<String>;
  label_starts_with?: Maybe<String>;
  label_not_starts_with?: Maybe<String>;
  label_ends_with?: Maybe<String>;
  label_not_ends_with?: Maybe<String>;
  isRight?: Maybe<Boolean>;
  isRight_not?: Maybe<Boolean>;
  question?: Maybe<QuestionWhereInput>;
  AND?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
  OR?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
  NOT?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
}

export interface StudentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  schoolClass?: Maybe<SchoolClassWhereInput>;
  markerId?: Maybe<String>;
  markerId_not?: Maybe<String>;
  markerId_in?: Maybe<String[] | String>;
  markerId_not_in?: Maybe<String[] | String>;
  markerId_lt?: Maybe<String>;
  markerId_lte?: Maybe<String>;
  markerId_gt?: Maybe<String>;
  markerId_gte?: Maybe<String>;
  markerId_contains?: Maybe<String>;
  markerId_not_contains?: Maybe<String>;
  markerId_starts_with?: Maybe<String>;
  markerId_not_starts_with?: Maybe<String>;
  markerId_ends_with?: Maybe<String>;
  markerId_not_ends_with?: Maybe<String>;
  AND?: Maybe<StudentWhereInput[] | StudentWhereInput>;
  OR?: Maybe<StudentWhereInput[] | StudentWhereInput>;
  NOT?: Maybe<StudentWhereInput[] | StudentWhereInput>;
}

export type MarkerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MarkerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  markerId?: Maybe<Int>;
  markerId_not?: Maybe<Int>;
  markerId_in?: Maybe<Int[] | Int>;
  markerId_not_in?: Maybe<Int[] | Int>;
  markerId_lt?: Maybe<Int>;
  markerId_lte?: Maybe<Int>;
  markerId_gt?: Maybe<Int>;
  markerId_gte?: Maybe<Int>;
  imageLink?: Maybe<String>;
  imageLink_not?: Maybe<String>;
  imageLink_in?: Maybe<String[] | String>;
  imageLink_not_in?: Maybe<String[] | String>;
  imageLink_lt?: Maybe<String>;
  imageLink_lte?: Maybe<String>;
  imageLink_gt?: Maybe<String>;
  imageLink_gte?: Maybe<String>;
  imageLink_contains?: Maybe<String>;
  imageLink_not_contains?: Maybe<String>;
  imageLink_starts_with?: Maybe<String>;
  imageLink_not_starts_with?: Maybe<String>;
  imageLink_ends_with?: Maybe<String>;
  imageLink_not_ends_with?: Maybe<String>;
  AND?: Maybe<MarkerWhereInput[] | MarkerWhereInput>;
  OR?: Maybe<MarkerWhereInput[] | MarkerWhereInput>;
  NOT?: Maybe<MarkerWhereInput[] | MarkerWhereInput>;
}

export type QuestionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type QuizWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ReportWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ReportWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  schoolClass?: Maybe<SchoolClassWhereInput>;
  student?: Maybe<StudentWhereInput>;
  quiz?: Maybe<QuizWhereInput>;
  question?: Maybe<QuestionWhereInput>;
  answer?: Maybe<AnswerWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  sessionId?: Maybe<String>;
  sessionId_not?: Maybe<String>;
  sessionId_in?: Maybe<String[] | String>;
  sessionId_not_in?: Maybe<String[] | String>;
  sessionId_lt?: Maybe<String>;
  sessionId_lte?: Maybe<String>;
  sessionId_gt?: Maybe<String>;
  sessionId_gte?: Maybe<String>;
  sessionId_contains?: Maybe<String>;
  sessionId_not_contains?: Maybe<String>;
  sessionId_starts_with?: Maybe<String>;
  sessionId_not_starts_with?: Maybe<String>;
  sessionId_ends_with?: Maybe<String>;
  sessionId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ReportWhereInput[] | ReportWhereInput>;
  OR?: Maybe<ReportWhereInput[] | ReportWhereInput>;
  NOT?: Maybe<ReportWhereInput[] | ReportWhereInput>;
}

export type SchoolClassWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SchoolSubjectWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type StudentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface AnswerCreateInput {
  id?: Maybe<ID_Input>;
  label: String;
  isRight: Boolean;
  question?: Maybe<QuestionCreateOneWithoutAnswersInput>;
}

export interface QuestionCreateOneWithoutAnswersInput {
  create?: Maybe<QuestionCreateWithoutAnswersInput>;
  connect?: Maybe<QuestionWhereUniqueInput>;
}

export interface QuestionCreateWithoutAnswersInput {
  id?: Maybe<ID_Input>;
  label: String;
  quiz?: Maybe<QuizCreateOneWithoutQuestionsInput>;
}

export interface QuizCreateOneWithoutQuestionsInput {
  create?: Maybe<QuizCreateWithoutQuestionsInput>;
  connect?: Maybe<QuizWhereUniqueInput>;
}

export interface QuizCreateWithoutQuestionsInput {
  id?: Maybe<ID_Input>;
  name: String;
  schoolSubject?: Maybe<SchoolSubjectCreateOneInput>;
  createdBy?: Maybe<UserCreateOneWithoutQuizzesInput>;
}

export interface SchoolSubjectCreateOneInput {
  create?: Maybe<SchoolSubjectCreateInput>;
  connect?: Maybe<SchoolSubjectWhereUniqueInput>;
}

export interface SchoolSubjectCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface UserCreateOneWithoutQuizzesInput {
  create?: Maybe<UserCreateWithoutQuizzesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutQuizzesInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  userName: String;
  password: String;
  schoolClasses?: Maybe<SchoolClassCreateManyWithoutTeacherInput>;
}

export interface SchoolClassCreateManyWithoutTeacherInput {
  create?: Maybe<
    | SchoolClassCreateWithoutTeacherInput[]
    | SchoolClassCreateWithoutTeacherInput
  >;
  connect?: Maybe<SchoolClassWhereUniqueInput[] | SchoolClassWhereUniqueInput>;
}

export interface SchoolClassCreateWithoutTeacherInput {
  id?: Maybe<ID_Input>;
  name: String;
  students?: Maybe<StudentCreateManyWithoutSchoolClassInput>;
}

export interface StudentCreateManyWithoutSchoolClassInput {
  create?: Maybe<
    | StudentCreateWithoutSchoolClassInput[]
    | StudentCreateWithoutSchoolClassInput
  >;
  connect?: Maybe<StudentWhereUniqueInput[] | StudentWhereUniqueInput>;
}

export interface StudentCreateWithoutSchoolClassInput {
  id?: Maybe<ID_Input>;
  name: String;
  markerId: String;
}

export interface AnswerUpdateInput {
  label?: Maybe<String>;
  isRight?: Maybe<Boolean>;
  question?: Maybe<QuestionUpdateOneWithoutAnswersInput>;
}

export interface QuestionUpdateOneWithoutAnswersInput {
  create?: Maybe<QuestionCreateWithoutAnswersInput>;
  update?: Maybe<QuestionUpdateWithoutAnswersDataInput>;
  upsert?: Maybe<QuestionUpsertWithoutAnswersInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<QuestionWhereUniqueInput>;
}

export interface QuestionUpdateWithoutAnswersDataInput {
  label?: Maybe<String>;
  quiz?: Maybe<QuizUpdateOneWithoutQuestionsInput>;
}

export interface QuizUpdateOneWithoutQuestionsInput {
  create?: Maybe<QuizCreateWithoutQuestionsInput>;
  update?: Maybe<QuizUpdateWithoutQuestionsDataInput>;
  upsert?: Maybe<QuizUpsertWithoutQuestionsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<QuizWhereUniqueInput>;
}

export interface QuizUpdateWithoutQuestionsDataInput {
  name?: Maybe<String>;
  schoolSubject?: Maybe<SchoolSubjectUpdateOneInput>;
  createdBy?: Maybe<UserUpdateOneWithoutQuizzesInput>;
}

export interface SchoolSubjectUpdateOneInput {
  create?: Maybe<SchoolSubjectCreateInput>;
  update?: Maybe<SchoolSubjectUpdateDataInput>;
  upsert?: Maybe<SchoolSubjectUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SchoolSubjectWhereUniqueInput>;
}

export interface SchoolSubjectUpdateDataInput {
  name?: Maybe<String>;
}

export interface SchoolSubjectUpsertNestedInput {
  update: SchoolSubjectUpdateDataInput;
  create: SchoolSubjectCreateInput;
}

export interface UserUpdateOneWithoutQuizzesInput {
  create?: Maybe<UserCreateWithoutQuizzesInput>;
  update?: Maybe<UserUpdateWithoutQuizzesDataInput>;
  upsert?: Maybe<UserUpsertWithoutQuizzesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutQuizzesDataInput {
  email?: Maybe<String>;
  userName?: Maybe<String>;
  password?: Maybe<String>;
  schoolClasses?: Maybe<SchoolClassUpdateManyWithoutTeacherInput>;
}

export interface SchoolClassUpdateManyWithoutTeacherInput {
  create?: Maybe<
    | SchoolClassCreateWithoutTeacherInput[]
    | SchoolClassCreateWithoutTeacherInput
  >;
  delete?: Maybe<SchoolClassWhereUniqueInput[] | SchoolClassWhereUniqueInput>;
  connect?: Maybe<SchoolClassWhereUniqueInput[] | SchoolClassWhereUniqueInput>;
  set?: Maybe<SchoolClassWhereUniqueInput[] | SchoolClassWhereUniqueInput>;
  disconnect?: Maybe<
    SchoolClassWhereUniqueInput[] | SchoolClassWhereUniqueInput
  >;
  update?: Maybe<
    | SchoolClassUpdateWithWhereUniqueWithoutTeacherInput[]
    | SchoolClassUpdateWithWhereUniqueWithoutTeacherInput
  >;
  upsert?: Maybe<
    | SchoolClassUpsertWithWhereUniqueWithoutTeacherInput[]
    | SchoolClassUpsertWithWhereUniqueWithoutTeacherInput
  >;
  deleteMany?: Maybe<
    SchoolClassScalarWhereInput[] | SchoolClassScalarWhereInput
  >;
  updateMany?: Maybe<
    | SchoolClassUpdateManyWithWhereNestedInput[]
    | SchoolClassUpdateManyWithWhereNestedInput
  >;
}

export interface SchoolClassUpdateWithWhereUniqueWithoutTeacherInput {
  where: SchoolClassWhereUniqueInput;
  data: SchoolClassUpdateWithoutTeacherDataInput;
}

export interface SchoolClassUpdateWithoutTeacherDataInput {
  name?: Maybe<String>;
  students?: Maybe<StudentUpdateManyWithoutSchoolClassInput>;
}

export interface StudentUpdateManyWithoutSchoolClassInput {
  create?: Maybe<
    | StudentCreateWithoutSchoolClassInput[]
    | StudentCreateWithoutSchoolClassInput
  >;
  delete?: Maybe<StudentWhereUniqueInput[] | StudentWhereUniqueInput>;
  connect?: Maybe<StudentWhereUniqueInput[] | StudentWhereUniqueInput>;
  set?: Maybe<StudentWhereUniqueInput[] | StudentWhereUniqueInput>;
  disconnect?: Maybe<StudentWhereUniqueInput[] | StudentWhereUniqueInput>;
  update?: Maybe<
    | StudentUpdateWithWhereUniqueWithoutSchoolClassInput[]
    | StudentUpdateWithWhereUniqueWithoutSchoolClassInput
  >;
  upsert?: Maybe<
    | StudentUpsertWithWhereUniqueWithoutSchoolClassInput[]
    | StudentUpsertWithWhereUniqueWithoutSchoolClassInput
  >;
  deleteMany?: Maybe<StudentScalarWhereInput[] | StudentScalarWhereInput>;
  updateMany?: Maybe<
    | StudentUpdateManyWithWhereNestedInput[]
    | StudentUpdateManyWithWhereNestedInput
  >;
}

export interface StudentUpdateWithWhereUniqueWithoutSchoolClassInput {
  where: StudentWhereUniqueInput;
  data: StudentUpdateWithoutSchoolClassDataInput;
}

export interface StudentUpdateWithoutSchoolClassDataInput {
  name?: Maybe<String>;
  markerId?: Maybe<String>;
}

export interface StudentUpsertWithWhereUniqueWithoutSchoolClassInput {
  where: StudentWhereUniqueInput;
  update: StudentUpdateWithoutSchoolClassDataInput;
  create: StudentCreateWithoutSchoolClassInput;
}

export interface StudentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  markerId?: Maybe<String>;
  markerId_not?: Maybe<String>;
  markerId_in?: Maybe<String[] | String>;
  markerId_not_in?: Maybe<String[] | String>;
  markerId_lt?: Maybe<String>;
  markerId_lte?: Maybe<String>;
  markerId_gt?: Maybe<String>;
  markerId_gte?: Maybe<String>;
  markerId_contains?: Maybe<String>;
  markerId_not_contains?: Maybe<String>;
  markerId_starts_with?: Maybe<String>;
  markerId_not_starts_with?: Maybe<String>;
  markerId_ends_with?: Maybe<String>;
  markerId_not_ends_with?: Maybe<String>;
  AND?: Maybe<StudentScalarWhereInput[] | StudentScalarWhereInput>;
  OR?: Maybe<StudentScalarWhereInput[] | StudentScalarWhereInput>;
  NOT?: Maybe<StudentScalarWhereInput[] | StudentScalarWhereInput>;
}

export interface StudentUpdateManyWithWhereNestedInput {
  where: StudentScalarWhereInput;
  data: StudentUpdateManyDataInput;
}

export interface StudentUpdateManyDataInput {
  name?: Maybe<String>;
  markerId?: Maybe<String>;
}

export interface SchoolClassUpsertWithWhereUniqueWithoutTeacherInput {
  where: SchoolClassWhereUniqueInput;
  update: SchoolClassUpdateWithoutTeacherDataInput;
  create: SchoolClassCreateWithoutTeacherInput;
}

export interface SchoolClassScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<SchoolClassScalarWhereInput[] | SchoolClassScalarWhereInput>;
  OR?: Maybe<SchoolClassScalarWhereInput[] | SchoolClassScalarWhereInput>;
  NOT?: Maybe<SchoolClassScalarWhereInput[] | SchoolClassScalarWhereInput>;
}

export interface SchoolClassUpdateManyWithWhereNestedInput {
  where: SchoolClassScalarWhereInput;
  data: SchoolClassUpdateManyDataInput;
}

export interface SchoolClassUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface UserUpsertWithoutQuizzesInput {
  update: UserUpdateWithoutQuizzesDataInput;
  create: UserCreateWithoutQuizzesInput;
}

export interface QuizUpsertWithoutQuestionsInput {
  update: QuizUpdateWithoutQuestionsDataInput;
  create: QuizCreateWithoutQuestionsInput;
}

export interface QuestionUpsertWithoutAnswersInput {
  update: QuestionUpdateWithoutAnswersDataInput;
  create: QuestionCreateWithoutAnswersInput;
}

export interface AnswerUpdateManyMutationInput {
  label?: Maybe<String>;
  isRight?: Maybe<Boolean>;
}

export interface MarkerCreateInput {
  id?: Maybe<ID_Input>;
  markerId?: Maybe<Int>;
  imageLink?: Maybe<String>;
}

export interface MarkerUpdateInput {
  markerId?: Maybe<Int>;
  imageLink?: Maybe<String>;
}

export interface MarkerUpdateManyMutationInput {
  markerId?: Maybe<Int>;
  imageLink?: Maybe<String>;
}

export interface QuestionCreateInput {
  id?: Maybe<ID_Input>;
  label: String;
  quiz?: Maybe<QuizCreateOneWithoutQuestionsInput>;
  answers?: Maybe<AnswerCreateManyWithoutQuestionInput>;
}

export interface AnswerCreateManyWithoutQuestionInput {
  create?: Maybe<
    AnswerCreateWithoutQuestionInput[] | AnswerCreateWithoutQuestionInput
  >;
  connect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
}

export interface AnswerCreateWithoutQuestionInput {
  id?: Maybe<ID_Input>;
  label: String;
  isRight: Boolean;
}

export interface QuestionUpdateInput {
  label?: Maybe<String>;
  quiz?: Maybe<QuizUpdateOneWithoutQuestionsInput>;
  answers?: Maybe<AnswerUpdateManyWithoutQuestionInput>;
}

export interface AnswerUpdateManyWithoutQuestionInput {
  create?: Maybe<
    AnswerCreateWithoutQuestionInput[] | AnswerCreateWithoutQuestionInput
  >;
  delete?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  connect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  set?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  disconnect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  update?: Maybe<
    | AnswerUpdateWithWhereUniqueWithoutQuestionInput[]
    | AnswerUpdateWithWhereUniqueWithoutQuestionInput
  >;
  upsert?: Maybe<
    | AnswerUpsertWithWhereUniqueWithoutQuestionInput[]
    | AnswerUpsertWithWhereUniqueWithoutQuestionInput
  >;
  deleteMany?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
  updateMany?: Maybe<
    | AnswerUpdateManyWithWhereNestedInput[]
    | AnswerUpdateManyWithWhereNestedInput
  >;
}

export interface AnswerUpdateWithWhereUniqueWithoutQuestionInput {
  where: AnswerWhereUniqueInput;
  data: AnswerUpdateWithoutQuestionDataInput;
}

export interface AnswerUpdateWithoutQuestionDataInput {
  label?: Maybe<String>;
  isRight?: Maybe<Boolean>;
}

export interface AnswerUpsertWithWhereUniqueWithoutQuestionInput {
  where: AnswerWhereUniqueInput;
  update: AnswerUpdateWithoutQuestionDataInput;
  create: AnswerCreateWithoutQuestionInput;
}

export interface AnswerScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  label?: Maybe<String>;
  label_not?: Maybe<String>;
  label_in?: Maybe<String[] | String>;
  label_not_in?: Maybe<String[] | String>;
  label_lt?: Maybe<String>;
  label_lte?: Maybe<String>;
  label_gt?: Maybe<String>;
  label_gte?: Maybe<String>;
  label_contains?: Maybe<String>;
  label_not_contains?: Maybe<String>;
  label_starts_with?: Maybe<String>;
  label_not_starts_with?: Maybe<String>;
  label_ends_with?: Maybe<String>;
  label_not_ends_with?: Maybe<String>;
  isRight?: Maybe<Boolean>;
  isRight_not?: Maybe<Boolean>;
  AND?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
  OR?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
  NOT?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
}

export interface AnswerUpdateManyWithWhereNestedInput {
  where: AnswerScalarWhereInput;
  data: AnswerUpdateManyDataInput;
}

export interface AnswerUpdateManyDataInput {
  label?: Maybe<String>;
  isRight?: Maybe<Boolean>;
}

export interface QuestionUpdateManyMutationInput {
  label?: Maybe<String>;
}

export interface QuizCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  schoolSubject?: Maybe<SchoolSubjectCreateOneInput>;
  createdBy?: Maybe<UserCreateOneWithoutQuizzesInput>;
  questions?: Maybe<QuestionCreateManyWithoutQuizInput>;
}

export interface QuestionCreateManyWithoutQuizInput {
  create?: Maybe<
    QuestionCreateWithoutQuizInput[] | QuestionCreateWithoutQuizInput
  >;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
}

export interface QuestionCreateWithoutQuizInput {
  id?: Maybe<ID_Input>;
  label: String;
  answers?: Maybe<AnswerCreateManyWithoutQuestionInput>;
}

export interface QuizUpdateInput {
  name?: Maybe<String>;
  schoolSubject?: Maybe<SchoolSubjectUpdateOneInput>;
  createdBy?: Maybe<UserUpdateOneWithoutQuizzesInput>;
  questions?: Maybe<QuestionUpdateManyWithoutQuizInput>;
}

export interface QuestionUpdateManyWithoutQuizInput {
  create?: Maybe<
    QuestionCreateWithoutQuizInput[] | QuestionCreateWithoutQuizInput
  >;
  delete?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  set?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  disconnect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  update?: Maybe<
    | QuestionUpdateWithWhereUniqueWithoutQuizInput[]
    | QuestionUpdateWithWhereUniqueWithoutQuizInput
  >;
  upsert?: Maybe<
    | QuestionUpsertWithWhereUniqueWithoutQuizInput[]
    | QuestionUpsertWithWhereUniqueWithoutQuizInput
  >;
  deleteMany?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  updateMany?: Maybe<
    | QuestionUpdateManyWithWhereNestedInput[]
    | QuestionUpdateManyWithWhereNestedInput
  >;
}

export interface QuestionUpdateWithWhereUniqueWithoutQuizInput {
  where: QuestionWhereUniqueInput;
  data: QuestionUpdateWithoutQuizDataInput;
}

export interface QuestionUpdateWithoutQuizDataInput {
  label?: Maybe<String>;
  answers?: Maybe<AnswerUpdateManyWithoutQuestionInput>;
}

export interface QuestionUpsertWithWhereUniqueWithoutQuizInput {
  where: QuestionWhereUniqueInput;
  update: QuestionUpdateWithoutQuizDataInput;
  create: QuestionCreateWithoutQuizInput;
}

export interface QuestionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  label?: Maybe<String>;
  label_not?: Maybe<String>;
  label_in?: Maybe<String[] | String>;
  label_not_in?: Maybe<String[] | String>;
  label_lt?: Maybe<String>;
  label_lte?: Maybe<String>;
  label_gt?: Maybe<String>;
  label_gte?: Maybe<String>;
  label_contains?: Maybe<String>;
  label_not_contains?: Maybe<String>;
  label_starts_with?: Maybe<String>;
  label_not_starts_with?: Maybe<String>;
  label_ends_with?: Maybe<String>;
  label_not_ends_with?: Maybe<String>;
  AND?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  OR?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  NOT?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
}

export interface QuestionUpdateManyWithWhereNestedInput {
  where: QuestionScalarWhereInput;
  data: QuestionUpdateManyDataInput;
}

export interface QuestionUpdateManyDataInput {
  label?: Maybe<String>;
}

export interface QuizUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface ReportCreateInput {
  id?: Maybe<ID_Input>;
  schoolClass?: Maybe<SchoolClassCreateOneInput>;
  student?: Maybe<StudentCreateOneInput>;
  quiz?: Maybe<QuizCreateOneInput>;
  question?: Maybe<QuestionCreateOneInput>;
  answer?: Maybe<AnswerCreateOneInput>;
  sessionId: String;
}

export interface SchoolClassCreateOneInput {
  create?: Maybe<SchoolClassCreateInput>;
  connect?: Maybe<SchoolClassWhereUniqueInput>;
}

export interface SchoolClassCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  teacher?: Maybe<UserCreateOneWithoutSchoolClassesInput>;
  students?: Maybe<StudentCreateManyWithoutSchoolClassInput>;
}

export interface UserCreateOneWithoutSchoolClassesInput {
  create?: Maybe<UserCreateWithoutSchoolClassesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutSchoolClassesInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  userName: String;
  password: String;
  quizzes?: Maybe<QuizCreateManyWithoutCreatedByInput>;
}

export interface QuizCreateManyWithoutCreatedByInput {
  create?: Maybe<
    QuizCreateWithoutCreatedByInput[] | QuizCreateWithoutCreatedByInput
  >;
  connect?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
}

export interface QuizCreateWithoutCreatedByInput {
  id?: Maybe<ID_Input>;
  name: String;
  schoolSubject?: Maybe<SchoolSubjectCreateOneInput>;
  questions?: Maybe<QuestionCreateManyWithoutQuizInput>;
}

export interface StudentCreateOneInput {
  create?: Maybe<StudentCreateInput>;
  connect?: Maybe<StudentWhereUniqueInput>;
}

export interface StudentCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  schoolClass?: Maybe<SchoolClassCreateOneWithoutStudentsInput>;
  markerId: String;
}

export interface SchoolClassCreateOneWithoutStudentsInput {
  create?: Maybe<SchoolClassCreateWithoutStudentsInput>;
  connect?: Maybe<SchoolClassWhereUniqueInput>;
}

export interface SchoolClassCreateWithoutStudentsInput {
  id?: Maybe<ID_Input>;
  name: String;
  teacher?: Maybe<UserCreateOneWithoutSchoolClassesInput>;
}

export interface QuizCreateOneInput {
  create?: Maybe<QuizCreateInput>;
  connect?: Maybe<QuizWhereUniqueInput>;
}

export interface QuestionCreateOneInput {
  create?: Maybe<QuestionCreateInput>;
  connect?: Maybe<QuestionWhereUniqueInput>;
}

export interface AnswerCreateOneInput {
  create?: Maybe<AnswerCreateInput>;
  connect?: Maybe<AnswerWhereUniqueInput>;
}

export interface ReportUpdateInput {
  schoolClass?: Maybe<SchoolClassUpdateOneInput>;
  student?: Maybe<StudentUpdateOneInput>;
  quiz?: Maybe<QuizUpdateOneInput>;
  question?: Maybe<QuestionUpdateOneInput>;
  answer?: Maybe<AnswerUpdateOneInput>;
  sessionId?: Maybe<String>;
}

export interface SchoolClassUpdateOneInput {
  create?: Maybe<SchoolClassCreateInput>;
  update?: Maybe<SchoolClassUpdateDataInput>;
  upsert?: Maybe<SchoolClassUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SchoolClassWhereUniqueInput>;
}

export interface SchoolClassUpdateDataInput {
  name?: Maybe<String>;
  teacher?: Maybe<UserUpdateOneWithoutSchoolClassesInput>;
  students?: Maybe<StudentUpdateManyWithoutSchoolClassInput>;
}

export interface UserUpdateOneWithoutSchoolClassesInput {
  create?: Maybe<UserCreateWithoutSchoolClassesInput>;
  update?: Maybe<UserUpdateWithoutSchoolClassesDataInput>;
  upsert?: Maybe<UserUpsertWithoutSchoolClassesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutSchoolClassesDataInput {
  email?: Maybe<String>;
  userName?: Maybe<String>;
  password?: Maybe<String>;
  quizzes?: Maybe<QuizUpdateManyWithoutCreatedByInput>;
}

export interface QuizUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    QuizCreateWithoutCreatedByInput[] | QuizCreateWithoutCreatedByInput
  >;
  delete?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  connect?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  set?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  disconnect?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  update?: Maybe<
    | QuizUpdateWithWhereUniqueWithoutCreatedByInput[]
    | QuizUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | QuizUpsertWithWhereUniqueWithoutCreatedByInput[]
    | QuizUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<QuizScalarWhereInput[] | QuizScalarWhereInput>;
  updateMany?: Maybe<
    QuizUpdateManyWithWhereNestedInput[] | QuizUpdateManyWithWhereNestedInput
  >;
}

export interface QuizUpdateWithWhereUniqueWithoutCreatedByInput {
  where: QuizWhereUniqueInput;
  data: QuizUpdateWithoutCreatedByDataInput;
}

export interface QuizUpdateWithoutCreatedByDataInput {
  name?: Maybe<String>;
  schoolSubject?: Maybe<SchoolSubjectUpdateOneInput>;
  questions?: Maybe<QuestionUpdateManyWithoutQuizInput>;
}

export interface QuizUpsertWithWhereUniqueWithoutCreatedByInput {
  where: QuizWhereUniqueInput;
  update: QuizUpdateWithoutCreatedByDataInput;
  create: QuizCreateWithoutCreatedByInput;
}

export interface QuizScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<QuizScalarWhereInput[] | QuizScalarWhereInput>;
  OR?: Maybe<QuizScalarWhereInput[] | QuizScalarWhereInput>;
  NOT?: Maybe<QuizScalarWhereInput[] | QuizScalarWhereInput>;
}

export interface QuizUpdateManyWithWhereNestedInput {
  where: QuizScalarWhereInput;
  data: QuizUpdateManyDataInput;
}

export interface QuizUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface UserUpsertWithoutSchoolClassesInput {
  update: UserUpdateWithoutSchoolClassesDataInput;
  create: UserCreateWithoutSchoolClassesInput;
}

export interface SchoolClassUpsertNestedInput {
  update: SchoolClassUpdateDataInput;
  create: SchoolClassCreateInput;
}

export interface StudentUpdateOneInput {
  create?: Maybe<StudentCreateInput>;
  update?: Maybe<StudentUpdateDataInput>;
  upsert?: Maybe<StudentUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<StudentWhereUniqueInput>;
}

export interface StudentUpdateDataInput {
  name?: Maybe<String>;
  schoolClass?: Maybe<SchoolClassUpdateOneWithoutStudentsInput>;
  markerId?: Maybe<String>;
}

export interface SchoolClassUpdateOneWithoutStudentsInput {
  create?: Maybe<SchoolClassCreateWithoutStudentsInput>;
  update?: Maybe<SchoolClassUpdateWithoutStudentsDataInput>;
  upsert?: Maybe<SchoolClassUpsertWithoutStudentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SchoolClassWhereUniqueInput>;
}

export interface SchoolClassUpdateWithoutStudentsDataInput {
  name?: Maybe<String>;
  teacher?: Maybe<UserUpdateOneWithoutSchoolClassesInput>;
}

export interface SchoolClassUpsertWithoutStudentsInput {
  update: SchoolClassUpdateWithoutStudentsDataInput;
  create: SchoolClassCreateWithoutStudentsInput;
}

export interface StudentUpsertNestedInput {
  update: StudentUpdateDataInput;
  create: StudentCreateInput;
}

export interface QuizUpdateOneInput {
  create?: Maybe<QuizCreateInput>;
  update?: Maybe<QuizUpdateDataInput>;
  upsert?: Maybe<QuizUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<QuizWhereUniqueInput>;
}

export interface QuizUpdateDataInput {
  name?: Maybe<String>;
  schoolSubject?: Maybe<SchoolSubjectUpdateOneInput>;
  createdBy?: Maybe<UserUpdateOneWithoutQuizzesInput>;
  questions?: Maybe<QuestionUpdateManyWithoutQuizInput>;
}

export interface QuizUpsertNestedInput {
  update: QuizUpdateDataInput;
  create: QuizCreateInput;
}

export interface QuestionUpdateOneInput {
  create?: Maybe<QuestionCreateInput>;
  update?: Maybe<QuestionUpdateDataInput>;
  upsert?: Maybe<QuestionUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<QuestionWhereUniqueInput>;
}

export interface QuestionUpdateDataInput {
  label?: Maybe<String>;
  quiz?: Maybe<QuizUpdateOneWithoutQuestionsInput>;
  answers?: Maybe<AnswerUpdateManyWithoutQuestionInput>;
}

export interface QuestionUpsertNestedInput {
  update: QuestionUpdateDataInput;
  create: QuestionCreateInput;
}

export interface AnswerUpdateOneInput {
  create?: Maybe<AnswerCreateInput>;
  update?: Maybe<AnswerUpdateDataInput>;
  upsert?: Maybe<AnswerUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<AnswerWhereUniqueInput>;
}

export interface AnswerUpdateDataInput {
  label?: Maybe<String>;
  isRight?: Maybe<Boolean>;
  question?: Maybe<QuestionUpdateOneWithoutAnswersInput>;
}

export interface AnswerUpsertNestedInput {
  update: AnswerUpdateDataInput;
  create: AnswerCreateInput;
}

export interface ReportUpdateManyMutationInput {
  sessionId?: Maybe<String>;
}

export interface SchoolClassUpdateInput {
  name?: Maybe<String>;
  teacher?: Maybe<UserUpdateOneWithoutSchoolClassesInput>;
  students?: Maybe<StudentUpdateManyWithoutSchoolClassInput>;
}

export interface SchoolClassUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface SchoolSubjectUpdateInput {
  name?: Maybe<String>;
}

export interface SchoolSubjectUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface StudentUpdateInput {
  name?: Maybe<String>;
  schoolClass?: Maybe<SchoolClassUpdateOneWithoutStudentsInput>;
  markerId?: Maybe<String>;
}

export interface StudentUpdateManyMutationInput {
  name?: Maybe<String>;
  markerId?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  userName: String;
  password: String;
  schoolClasses?: Maybe<SchoolClassCreateManyWithoutTeacherInput>;
  quizzes?: Maybe<QuizCreateManyWithoutCreatedByInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  userName?: Maybe<String>;
  password?: Maybe<String>;
  schoolClasses?: Maybe<SchoolClassUpdateManyWithoutTeacherInput>;
  quizzes?: Maybe<QuizUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  userName?: Maybe<String>;
  password?: Maybe<String>;
}

export interface AnswerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AnswerWhereInput>;
  AND?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
  OR?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
  NOT?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
}

export interface MarkerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MarkerWhereInput>;
  AND?: Maybe<MarkerSubscriptionWhereInput[] | MarkerSubscriptionWhereInput>;
  OR?: Maybe<MarkerSubscriptionWhereInput[] | MarkerSubscriptionWhereInput>;
  NOT?: Maybe<MarkerSubscriptionWhereInput[] | MarkerSubscriptionWhereInput>;
}

export interface QuestionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<QuestionWhereInput>;
  AND?: Maybe<
    QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput
  >;
  OR?: Maybe<QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput>;
  NOT?: Maybe<
    QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput
  >;
}

export interface QuizSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<QuizWhereInput>;
  AND?: Maybe<QuizSubscriptionWhereInput[] | QuizSubscriptionWhereInput>;
  OR?: Maybe<QuizSubscriptionWhereInput[] | QuizSubscriptionWhereInput>;
  NOT?: Maybe<QuizSubscriptionWhereInput[] | QuizSubscriptionWhereInput>;
}

export interface ReportSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ReportWhereInput>;
  AND?: Maybe<ReportSubscriptionWhereInput[] | ReportSubscriptionWhereInput>;
  OR?: Maybe<ReportSubscriptionWhereInput[] | ReportSubscriptionWhereInput>;
  NOT?: Maybe<ReportSubscriptionWhereInput[] | ReportSubscriptionWhereInput>;
}

export interface SchoolClassSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SchoolClassWhereInput>;
  AND?: Maybe<
    SchoolClassSubscriptionWhereInput[] | SchoolClassSubscriptionWhereInput
  >;
  OR?: Maybe<
    SchoolClassSubscriptionWhereInput[] | SchoolClassSubscriptionWhereInput
  >;
  NOT?: Maybe<
    SchoolClassSubscriptionWhereInput[] | SchoolClassSubscriptionWhereInput
  >;
}

export interface SchoolSubjectSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SchoolSubjectWhereInput>;
  AND?: Maybe<
    SchoolSubjectSubscriptionWhereInput[] | SchoolSubjectSubscriptionWhereInput
  >;
  OR?: Maybe<
    SchoolSubjectSubscriptionWhereInput[] | SchoolSubjectSubscriptionWhereInput
  >;
  NOT?: Maybe<
    SchoolSubjectSubscriptionWhereInput[] | SchoolSubjectSubscriptionWhereInput
  >;
}

export interface StudentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StudentWhereInput>;
  AND?: Maybe<StudentSubscriptionWhereInput[] | StudentSubscriptionWhereInput>;
  OR?: Maybe<StudentSubscriptionWhereInput[] | StudentSubscriptionWhereInput>;
  NOT?: Maybe<StudentSubscriptionWhereInput[] | StudentSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Answer {
  id: ID_Output;
  label: String;
  isRight: Boolean;
}

export interface AnswerPromise extends Promise<Answer>, Fragmentable {
  id: () => Promise<ID_Output>;
  label: () => Promise<String>;
  isRight: () => Promise<Boolean>;
  question: <T = QuestionPromise>() => T;
}

export interface AnswerSubscription
  extends Promise<AsyncIterator<Answer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  label: () => Promise<AsyncIterator<String>>;
  isRight: () => Promise<AsyncIterator<Boolean>>;
  question: <T = QuestionSubscription>() => T;
}

export interface AnswerNullablePromise
  extends Promise<Answer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  label: () => Promise<String>;
  isRight: () => Promise<Boolean>;
  question: <T = QuestionPromise>() => T;
}

export interface Question {
  id: ID_Output;
  label: String;
}

export interface QuestionPromise extends Promise<Question>, Fragmentable {
  id: () => Promise<ID_Output>;
  label: () => Promise<String>;
  quiz: <T = QuizPromise>() => T;
  answers: <T = FragmentableArray<Answer>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface QuestionSubscription
  extends Promise<AsyncIterator<Question>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  label: () => Promise<AsyncIterator<String>>;
  quiz: <T = QuizSubscription>() => T;
  answers: <T = Promise<AsyncIterator<AnswerSubscription>>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface QuestionNullablePromise
  extends Promise<Question | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  label: () => Promise<String>;
  quiz: <T = QuizPromise>() => T;
  answers: <T = FragmentableArray<Answer>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Quiz {
  id: ID_Output;
  name: String;
}

export interface QuizPromise extends Promise<Quiz>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  schoolSubject: <T = SchoolSubjectPromise>() => T;
  createdBy: <T = UserPromise>() => T;
  questions: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface QuizSubscription
  extends Promise<AsyncIterator<Quiz>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  schoolSubject: <T = SchoolSubjectSubscription>() => T;
  createdBy: <T = UserSubscription>() => T;
  questions: <T = Promise<AsyncIterator<QuestionSubscription>>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface QuizNullablePromise
  extends Promise<Quiz | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  schoolSubject: <T = SchoolSubjectPromise>() => T;
  createdBy: <T = UserPromise>() => T;
  questions: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SchoolSubject {
  id: ID_Output;
  name: String;
}

export interface SchoolSubjectPromise
  extends Promise<SchoolSubject>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface SchoolSubjectSubscription
  extends Promise<AsyncIterator<SchoolSubject>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface SchoolSubjectNullablePromise
  extends Promise<SchoolSubject | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface User {
  id: ID_Output;
  email?: String;
  userName: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  userName: () => Promise<String>;
  password: () => Promise<String>;
  schoolClasses: <T = FragmentableArray<SchoolClass>>(args?: {
    where?: SchoolClassWhereInput;
    orderBy?: SchoolClassOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  quizzes: <T = FragmentableArray<Quiz>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  userName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  schoolClasses: <T = Promise<AsyncIterator<SchoolClassSubscription>>>(args?: {
    where?: SchoolClassWhereInput;
    orderBy?: SchoolClassOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  quizzes: <T = Promise<AsyncIterator<QuizSubscription>>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  userName: () => Promise<String>;
  password: () => Promise<String>;
  schoolClasses: <T = FragmentableArray<SchoolClass>>(args?: {
    where?: SchoolClassWhereInput;
    orderBy?: SchoolClassOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  quizzes: <T = FragmentableArray<Quiz>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SchoolClass {
  id: ID_Output;
  name: String;
}

export interface SchoolClassPromise extends Promise<SchoolClass>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  teacher: <T = UserPromise>() => T;
  students: <T = FragmentableArray<Student>>(args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SchoolClassSubscription
  extends Promise<AsyncIterator<SchoolClass>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  teacher: <T = UserSubscription>() => T;
  students: <T = Promise<AsyncIterator<StudentSubscription>>>(args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SchoolClassNullablePromise
  extends Promise<SchoolClass | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  teacher: <T = UserPromise>() => T;
  students: <T = FragmentableArray<Student>>(args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Student {
  id: ID_Output;
  name: String;
  markerId: String;
}

export interface StudentPromise extends Promise<Student>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  schoolClass: <T = SchoolClassPromise>() => T;
  markerId: () => Promise<String>;
}

export interface StudentSubscription
  extends Promise<AsyncIterator<Student>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  schoolClass: <T = SchoolClassSubscription>() => T;
  markerId: () => Promise<AsyncIterator<String>>;
}

export interface StudentNullablePromise
  extends Promise<Student | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  schoolClass: <T = SchoolClassPromise>() => T;
  markerId: () => Promise<String>;
}

export interface AnswerConnection {
  pageInfo: PageInfo;
  edges: AnswerEdge[];
}

export interface AnswerConnectionPromise
  extends Promise<AnswerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AnswerEdge>>() => T;
  aggregate: <T = AggregateAnswerPromise>() => T;
}

export interface AnswerConnectionSubscription
  extends Promise<AsyncIterator<AnswerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AnswerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAnswerSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AnswerEdge {
  node: Answer;
  cursor: String;
}

export interface AnswerEdgePromise extends Promise<AnswerEdge>, Fragmentable {
  node: <T = AnswerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AnswerEdgeSubscription
  extends Promise<AsyncIterator<AnswerEdge>>,
    Fragmentable {
  node: <T = AnswerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAnswer {
  count: Int;
}

export interface AggregateAnswerPromise
  extends Promise<AggregateAnswer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAnswerSubscription
  extends Promise<AsyncIterator<AggregateAnswer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Marker {
  id: ID_Output;
  markerId?: Int;
  imageLink?: String;
}

export interface MarkerPromise extends Promise<Marker>, Fragmentable {
  id: () => Promise<ID_Output>;
  markerId: () => Promise<Int>;
  imageLink: () => Promise<String>;
}

export interface MarkerSubscription
  extends Promise<AsyncIterator<Marker>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  markerId: () => Promise<AsyncIterator<Int>>;
  imageLink: () => Promise<AsyncIterator<String>>;
}

export interface MarkerNullablePromise
  extends Promise<Marker | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  markerId: () => Promise<Int>;
  imageLink: () => Promise<String>;
}

export interface MarkerConnection {
  pageInfo: PageInfo;
  edges: MarkerEdge[];
}

export interface MarkerConnectionPromise
  extends Promise<MarkerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MarkerEdge>>() => T;
  aggregate: <T = AggregateMarkerPromise>() => T;
}

export interface MarkerConnectionSubscription
  extends Promise<AsyncIterator<MarkerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MarkerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMarkerSubscription>() => T;
}

export interface MarkerEdge {
  node: Marker;
  cursor: String;
}

export interface MarkerEdgePromise extends Promise<MarkerEdge>, Fragmentable {
  node: <T = MarkerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MarkerEdgeSubscription
  extends Promise<AsyncIterator<MarkerEdge>>,
    Fragmentable {
  node: <T = MarkerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMarker {
  count: Int;
}

export interface AggregateMarkerPromise
  extends Promise<AggregateMarker>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMarkerSubscription
  extends Promise<AsyncIterator<AggregateMarker>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface QuestionConnection {
  pageInfo: PageInfo;
  edges: QuestionEdge[];
}

export interface QuestionConnectionPromise
  extends Promise<QuestionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<QuestionEdge>>() => T;
  aggregate: <T = AggregateQuestionPromise>() => T;
}

export interface QuestionConnectionSubscription
  extends Promise<AsyncIterator<QuestionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QuestionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQuestionSubscription>() => T;
}

export interface QuestionEdge {
  node: Question;
  cursor: String;
}

export interface QuestionEdgePromise
  extends Promise<QuestionEdge>,
    Fragmentable {
  node: <T = QuestionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface QuestionEdgeSubscription
  extends Promise<AsyncIterator<QuestionEdge>>,
    Fragmentable {
  node: <T = QuestionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateQuestion {
  count: Int;
}

export interface AggregateQuestionPromise
  extends Promise<AggregateQuestion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQuestionSubscription
  extends Promise<AsyncIterator<AggregateQuestion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface QuizConnection {
  pageInfo: PageInfo;
  edges: QuizEdge[];
}

export interface QuizConnectionPromise
  extends Promise<QuizConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<QuizEdge>>() => T;
  aggregate: <T = AggregateQuizPromise>() => T;
}

export interface QuizConnectionSubscription
  extends Promise<AsyncIterator<QuizConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QuizEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQuizSubscription>() => T;
}

export interface QuizEdge {
  node: Quiz;
  cursor: String;
}

export interface QuizEdgePromise extends Promise<QuizEdge>, Fragmentable {
  node: <T = QuizPromise>() => T;
  cursor: () => Promise<String>;
}

export interface QuizEdgeSubscription
  extends Promise<AsyncIterator<QuizEdge>>,
    Fragmentable {
  node: <T = QuizSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateQuiz {
  count: Int;
}

export interface AggregateQuizPromise
  extends Promise<AggregateQuiz>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQuizSubscription
  extends Promise<AsyncIterator<AggregateQuiz>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Report {
  id: ID_Output;
  createdAt: DateTimeOutput;
  sessionId: String;
}

export interface ReportPromise extends Promise<Report>, Fragmentable {
  id: () => Promise<ID_Output>;
  schoolClass: <T = SchoolClassPromise>() => T;
  student: <T = StudentPromise>() => T;
  quiz: <T = QuizPromise>() => T;
  question: <T = QuestionPromise>() => T;
  answer: <T = AnswerPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  sessionId: () => Promise<String>;
}

export interface ReportSubscription
  extends Promise<AsyncIterator<Report>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  schoolClass: <T = SchoolClassSubscription>() => T;
  student: <T = StudentSubscription>() => T;
  quiz: <T = QuizSubscription>() => T;
  question: <T = QuestionSubscription>() => T;
  answer: <T = AnswerSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  sessionId: () => Promise<AsyncIterator<String>>;
}

export interface ReportNullablePromise
  extends Promise<Report | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  schoolClass: <T = SchoolClassPromise>() => T;
  student: <T = StudentPromise>() => T;
  quiz: <T = QuizPromise>() => T;
  question: <T = QuestionPromise>() => T;
  answer: <T = AnswerPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  sessionId: () => Promise<String>;
}

export interface ReportConnection {
  pageInfo: PageInfo;
  edges: ReportEdge[];
}

export interface ReportConnectionPromise
  extends Promise<ReportConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReportEdge>>() => T;
  aggregate: <T = AggregateReportPromise>() => T;
}

export interface ReportConnectionSubscription
  extends Promise<AsyncIterator<ReportConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReportEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReportSubscription>() => T;
}

export interface ReportEdge {
  node: Report;
  cursor: String;
}

export interface ReportEdgePromise extends Promise<ReportEdge>, Fragmentable {
  node: <T = ReportPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReportEdgeSubscription
  extends Promise<AsyncIterator<ReportEdge>>,
    Fragmentable {
  node: <T = ReportSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateReport {
  count: Int;
}

export interface AggregateReportPromise
  extends Promise<AggregateReport>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReportSubscription
  extends Promise<AsyncIterator<AggregateReport>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SchoolClassConnection {
  pageInfo: PageInfo;
  edges: SchoolClassEdge[];
}

export interface SchoolClassConnectionPromise
  extends Promise<SchoolClassConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SchoolClassEdge>>() => T;
  aggregate: <T = AggregateSchoolClassPromise>() => T;
}

export interface SchoolClassConnectionSubscription
  extends Promise<AsyncIterator<SchoolClassConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SchoolClassEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSchoolClassSubscription>() => T;
}

export interface SchoolClassEdge {
  node: SchoolClass;
  cursor: String;
}

export interface SchoolClassEdgePromise
  extends Promise<SchoolClassEdge>,
    Fragmentable {
  node: <T = SchoolClassPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SchoolClassEdgeSubscription
  extends Promise<AsyncIterator<SchoolClassEdge>>,
    Fragmentable {
  node: <T = SchoolClassSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSchoolClass {
  count: Int;
}

export interface AggregateSchoolClassPromise
  extends Promise<AggregateSchoolClass>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSchoolClassSubscription
  extends Promise<AsyncIterator<AggregateSchoolClass>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SchoolSubjectConnection {
  pageInfo: PageInfo;
  edges: SchoolSubjectEdge[];
}

export interface SchoolSubjectConnectionPromise
  extends Promise<SchoolSubjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SchoolSubjectEdge>>() => T;
  aggregate: <T = AggregateSchoolSubjectPromise>() => T;
}

export interface SchoolSubjectConnectionSubscription
  extends Promise<AsyncIterator<SchoolSubjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SchoolSubjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSchoolSubjectSubscription>() => T;
}

export interface SchoolSubjectEdge {
  node: SchoolSubject;
  cursor: String;
}

export interface SchoolSubjectEdgePromise
  extends Promise<SchoolSubjectEdge>,
    Fragmentable {
  node: <T = SchoolSubjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SchoolSubjectEdgeSubscription
  extends Promise<AsyncIterator<SchoolSubjectEdge>>,
    Fragmentable {
  node: <T = SchoolSubjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSchoolSubject {
  count: Int;
}

export interface AggregateSchoolSubjectPromise
  extends Promise<AggregateSchoolSubject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSchoolSubjectSubscription
  extends Promise<AsyncIterator<AggregateSchoolSubject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StudentConnection {
  pageInfo: PageInfo;
  edges: StudentEdge[];
}

export interface StudentConnectionPromise
  extends Promise<StudentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StudentEdge>>() => T;
  aggregate: <T = AggregateStudentPromise>() => T;
}

export interface StudentConnectionSubscription
  extends Promise<AsyncIterator<StudentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StudentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStudentSubscription>() => T;
}

export interface StudentEdge {
  node: Student;
  cursor: String;
}

export interface StudentEdgePromise extends Promise<StudentEdge>, Fragmentable {
  node: <T = StudentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StudentEdgeSubscription
  extends Promise<AsyncIterator<StudentEdge>>,
    Fragmentable {
  node: <T = StudentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStudent {
  count: Int;
}

export interface AggregateStudentPromise
  extends Promise<AggregateStudent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStudentSubscription
  extends Promise<AsyncIterator<AggregateStudent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AnswerSubscriptionPayload {
  mutation: MutationType;
  node: Answer;
  updatedFields: String[];
  previousValues: AnswerPreviousValues;
}

export interface AnswerSubscriptionPayloadPromise
  extends Promise<AnswerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AnswerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AnswerPreviousValuesPromise>() => T;
}

export interface AnswerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AnswerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AnswerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AnswerPreviousValuesSubscription>() => T;
}

export interface AnswerPreviousValues {
  id: ID_Output;
  label: String;
  isRight: Boolean;
}

export interface AnswerPreviousValuesPromise
  extends Promise<AnswerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  label: () => Promise<String>;
  isRight: () => Promise<Boolean>;
}

export interface AnswerPreviousValuesSubscription
  extends Promise<AsyncIterator<AnswerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  label: () => Promise<AsyncIterator<String>>;
  isRight: () => Promise<AsyncIterator<Boolean>>;
}

export interface MarkerSubscriptionPayload {
  mutation: MutationType;
  node: Marker;
  updatedFields: String[];
  previousValues: MarkerPreviousValues;
}

export interface MarkerSubscriptionPayloadPromise
  extends Promise<MarkerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MarkerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MarkerPreviousValuesPromise>() => T;
}

export interface MarkerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MarkerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MarkerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MarkerPreviousValuesSubscription>() => T;
}

export interface MarkerPreviousValues {
  id: ID_Output;
  markerId?: Int;
  imageLink?: String;
}

export interface MarkerPreviousValuesPromise
  extends Promise<MarkerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  markerId: () => Promise<Int>;
  imageLink: () => Promise<String>;
}

export interface MarkerPreviousValuesSubscription
  extends Promise<AsyncIterator<MarkerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  markerId: () => Promise<AsyncIterator<Int>>;
  imageLink: () => Promise<AsyncIterator<String>>;
}

export interface QuestionSubscriptionPayload {
  mutation: MutationType;
  node: Question;
  updatedFields: String[];
  previousValues: QuestionPreviousValues;
}

export interface QuestionSubscriptionPayloadPromise
  extends Promise<QuestionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = QuestionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QuestionPreviousValuesPromise>() => T;
}

export interface QuestionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QuestionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QuestionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QuestionPreviousValuesSubscription>() => T;
}

export interface QuestionPreviousValues {
  id: ID_Output;
  label: String;
}

export interface QuestionPreviousValuesPromise
  extends Promise<QuestionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  label: () => Promise<String>;
}

export interface QuestionPreviousValuesSubscription
  extends Promise<AsyncIterator<QuestionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  label: () => Promise<AsyncIterator<String>>;
}

export interface QuizSubscriptionPayload {
  mutation: MutationType;
  node: Quiz;
  updatedFields: String[];
  previousValues: QuizPreviousValues;
}

export interface QuizSubscriptionPayloadPromise
  extends Promise<QuizSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = QuizPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QuizPreviousValuesPromise>() => T;
}

export interface QuizSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QuizSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QuizSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QuizPreviousValuesSubscription>() => T;
}

export interface QuizPreviousValues {
  id: ID_Output;
  name: String;
}

export interface QuizPreviousValuesPromise
  extends Promise<QuizPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface QuizPreviousValuesSubscription
  extends Promise<AsyncIterator<QuizPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ReportSubscriptionPayload {
  mutation: MutationType;
  node: Report;
  updatedFields: String[];
  previousValues: ReportPreviousValues;
}

export interface ReportSubscriptionPayloadPromise
  extends Promise<ReportSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReportPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReportPreviousValuesPromise>() => T;
}

export interface ReportSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReportSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReportSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReportPreviousValuesSubscription>() => T;
}

export interface ReportPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  sessionId: String;
}

export interface ReportPreviousValuesPromise
  extends Promise<ReportPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  sessionId: () => Promise<String>;
}

export interface ReportPreviousValuesSubscription
  extends Promise<AsyncIterator<ReportPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  sessionId: () => Promise<AsyncIterator<String>>;
}

export interface SchoolClassSubscriptionPayload {
  mutation: MutationType;
  node: SchoolClass;
  updatedFields: String[];
  previousValues: SchoolClassPreviousValues;
}

export interface SchoolClassSubscriptionPayloadPromise
  extends Promise<SchoolClassSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SchoolClassPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SchoolClassPreviousValuesPromise>() => T;
}

export interface SchoolClassSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SchoolClassSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SchoolClassSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SchoolClassPreviousValuesSubscription>() => T;
}

export interface SchoolClassPreviousValues {
  id: ID_Output;
  name: String;
}

export interface SchoolClassPreviousValuesPromise
  extends Promise<SchoolClassPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface SchoolClassPreviousValuesSubscription
  extends Promise<AsyncIterator<SchoolClassPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface SchoolSubjectSubscriptionPayload {
  mutation: MutationType;
  node: SchoolSubject;
  updatedFields: String[];
  previousValues: SchoolSubjectPreviousValues;
}

export interface SchoolSubjectSubscriptionPayloadPromise
  extends Promise<SchoolSubjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SchoolSubjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SchoolSubjectPreviousValuesPromise>() => T;
}

export interface SchoolSubjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SchoolSubjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SchoolSubjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SchoolSubjectPreviousValuesSubscription>() => T;
}

export interface SchoolSubjectPreviousValues {
  id: ID_Output;
  name: String;
}

export interface SchoolSubjectPreviousValuesPromise
  extends Promise<SchoolSubjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface SchoolSubjectPreviousValuesSubscription
  extends Promise<AsyncIterator<SchoolSubjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface StudentSubscriptionPayload {
  mutation: MutationType;
  node: Student;
  updatedFields: String[];
  previousValues: StudentPreviousValues;
}

export interface StudentSubscriptionPayloadPromise
  extends Promise<StudentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StudentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StudentPreviousValuesPromise>() => T;
}

export interface StudentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StudentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StudentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StudentPreviousValuesSubscription>() => T;
}

export interface StudentPreviousValues {
  id: ID_Output;
  name: String;
  markerId: String;
}

export interface StudentPreviousValuesPromise
  extends Promise<StudentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  markerId: () => Promise<String>;
}

export interface StudentPreviousValuesSubscription
  extends Promise<AsyncIterator<StudentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  markerId: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email?: String;
  userName: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  userName: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  userName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "SchoolClass",
    embedded: false
  },
  {
    name: "Student",
    embedded: false
  },
  {
    name: "Marker",
    embedded: false
  },
  {
    name: "SchoolSubject",
    embedded: false
  },
  {
    name: "Quiz",
    embedded: false
  },
  {
    name: "Question",
    embedded: false
  },
  {
    name: "Answer",
    embedded: false
  },
  {
    name: "Report",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
